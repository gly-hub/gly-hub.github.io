import{_ as e,r as o,o as p,c,b as n,d as s,e as t,a as i}from"./app-304f5532.js";const l={},u=n("h1",{id:"rpc-component",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rpc-component","aria-hidden":"true"},"#"),s(" RPC Component")],-1),r=n("h2",{id:"_1-what-is-rpc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-what-is-rpc","aria-hidden":"true"},"#"),s(" 1. What is RPC?")],-1),d={class:"theorem"},k=n("p",{class:"title"},"Remote Procedure Call",-1),v=n("p",null,"In distributed computing, a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in a different address space (commonly on another computer on a shared network), which is written as if it were a normal (local) procedure call, without the programmer explicitly writing the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. This is a form of client–server interaction (caller is client, executor is server), typically implemented via a request–response message-passing system. In the object-oriented programming paradigm, RPCs are represented by remote method invocation (RMI). The RPC model implies a level of location transparency, namely that calling procedures are largely the same whether they are local or remote, but usually, they are not identical, so local calls can be distinguished from remote calls. Remote calls are usually orders of magnitude slower and less reliable than local calls, so distinguishing them is important.",-1),m=n("p",null,"RPCs are a form of inter-process communication (IPC), in that different processes have different address spaces: if on the same host machine, they have distinct virtual address spaces, even though the physical address space is the same; while if they are on different hosts, the physical address space is different. Many different (often incompatible) technologies have been used to implement the concept.",-1),h={class:"custom-container right"},g={href:"https://en.wikipedia.org/wiki/Remote_procedure_call",target:"_blank",rel:"noopener noreferrer"},b=n("h2",{id:"_2-what-is-rpcx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-what-is-rpcx","aria-hidden":"true"},"#"),s(" 2.What is RPCx?")],-1),f={class:"theorem"},y=n("p",{class:"title"},"RPCx",-1),C=n("p",null,"RPCx is a distributed Go language RPC framework that supports multiple service discovery methods, such as ZooKeeper, etcd, and Consul. It is one of the fastest RPC frameworks available.",-1),w={class:"custom-container right"},R={href:"https://doc.rpcx.io/",target:"_blank",rel:"noopener noreferrer"},x=i(`<ul><li>Easy to use: Easy to learn, develop, integrate, deploy, and monitor.</li><li>High performance: Significantly outperforms frameworks like <code>Dubbo</code>, <code>Motan</code>, and <code>Thrift</code>, and offers twice the performance of <code>gRPC</code>.</li><li>Cross-platform and cross-language: Can be easily deployed on Windows/Linux/MacOS and supports various programming languages.</li><li>Service discovery: In addition to direct connections, it supports service discovery with <code>ZooKeeper</code>, <code>etcd</code>, <code>Consul</code>, <code>mDNS</code>, and more.</li><li>Service governance: Supports <code>failover</code>, <code>failfast</code>, <code>failtry</code>, backup, and other failure modes, as well as <code>random</code>, <code>round-robin</code>, <code>weighted</code>, <code>network quality</code>, <code>consistent hashing</code>, and <code>geographic routing algorithms</code>.</li></ul><h2 id="_3-how-to-use-rpcx" tabindex="-1"><a class="header-anchor" href="#_3-how-to-use-rpcx" aria-hidden="true">#</a> 3. How to use RPCx</h2><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The framework integrates the RPCx component, and you only need to configure the RPC server and client settings in the configuration file.</p></div><h3 id="_3-1-service-discovery" tabindex="-1"><a class="header-anchor" href="#_3-1-service-discovery" aria-hidden="true">#</a> 3.1 Service Discovery</h3><p>Refer to the actual project development. The framework only integrates three commonly used service discovery methods: <code>ZooKeeper</code>, <code>etcd</code>, and <code>Consul</code>.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	ETCD RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;etcd&quot;</span>
	ZK   RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;zookeeper&quot;</span>
	Con  RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;consul&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-service-governance" tabindex="-1"><a class="header-anchor" href="#_3-2-service-governance" aria-hidden="true">#</a> 3.2 Service Governance</h3><p>Service governance is a broad concept that generally refers to providing reliable measures to ensure the proper functioning of a system, independent of business logic. For common failure scenarios in microservice environments, it provides safeguards such as flow control, load balancing, retrying, and isolation.</p><h4 id="_3-2-1-basic-configuration" tabindex="-1"><a class="header-anchor" href="#_3-2-1-basic-configuration" aria-hidden="true">#</a> 3.2.1 Basic Configuration</h4><div class="custom-container tip"><p class="custom-container-title">Note</p><p>The basic configuration of the service can be customized and referred to in <code>server/rpcx/client.go:101</code>. If not customized, the default configuration is used.</p></div><p>Default configuration:</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">option</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Option <span class="token punctuation">{</span>
	opt <span class="token operator">:=</span> client<span class="token punctuation">.</span>Option<span class="token punctuation">{</span>
		Retries<span class="token punctuation">:</span>            <span class="token number">10</span><span class="token punctuation">,</span>               <span class="token comment">// Retry times</span>
		TimeToDisallow<span class="token punctuation">:</span>     time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>      <span class="token comment">// The failed server will not be retried for 30 seconds</span>
		ConnectTimeout<span class="token punctuation">:</span>     <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>  <span class="token comment">// Connection timeout</span>
		IdleTimeout<span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment">// Maximum idle time</span>
		BackupLatency<span class="token punctuation">:</span>      <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token comment">// ackup mode interval</span>
		GenBreaker<span class="token punctuation">:</span>         breaker<span class="token punctuation">,</span> <span class="token comment">// fuse</span>
		SerializeType<span class="token punctuation">:</span>      protocol<span class="token punctuation">.</span>MsgPack<span class="token punctuation">,</span> <span class="token comment">// serialize type</span>
		CompressType<span class="token punctuation">:</span>       protocol<span class="token punctuation">.</span>None<span class="token punctuation">,</span> <span class="token comment">// compress type</span>
		TCPKeepAlivePeriod<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> 
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> opt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Custom</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> opt

<span class="token comment">// Circuit breaker opens when the number of failures reaches 5 within 100 milliseconds</span>
<span class="token keyword">func</span> <span class="token function">customBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Breaker <span class="token punctuation">{</span>
	<span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">NewConsecCircuitBreaker</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">CustomOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Option <span class="token punctuation">{</span>
	opt <span class="token operator">:=</span> client<span class="token punctuation">.</span>Option<span class="token punctuation">{</span>
		Retries<span class="token punctuation">:</span>            <span class="token number">5</span><span class="token punctuation">,</span>               <span class="token comment">// Retry times</span>
		TimeToDisallow<span class="token punctuation">:</span>     time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>      <span class="token comment">// Retry is not allowed within 30 seconds</span>
		ConnectTimeout<span class="token punctuation">:</span>     <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>  <span class="token comment">// Connection timeout</span>
		IdleTimeout<span class="token punctuation">:</span>        <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment">// Maximum idle time</span>
		BackupLatency<span class="token punctuation">:</span>      <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token comment">// Backup mode interval</span>
		GenBreaker<span class="token punctuation">:</span>         customBreak<span class="token punctuation">,</span> <span class="token comment">// Circuit breaker</span>
		SerializeType<span class="token punctuation">:</span>      protocol<span class="token punctuation">.</span>MsgPack<span class="token punctuation">,</span> <span class="token comment">// Serialization type</span>
		CompressType<span class="token punctuation">:</span>       protocol<span class="token punctuation">.</span>None<span class="token punctuation">,</span> <span class="token comment">// Compression type</span>
		TCPKeepAlivePeriod<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> <span class="token comment">// TCP keep-alive time</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> opt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Register in <code>cmd/api/server.go</code>.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>

	<span class="token comment">// Register</span>
	rpcx<span class="token punctuation">.</span><span class="token function">CustomOptions</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>CustomOption<span class="token punctuation">)</span>

	<span class="token comment">// Application initialization</span>
	application<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-failure-mode" tabindex="-1"><a class="header-anchor" href="#_3-2-2-failure-mode" aria-hidden="true">#</a> 3.2.2 Failure Mode</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    <span class="token comment">// FailFast returns an error immediately if the call fails.</span>
    FailFast FailRetryModel <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token comment">// FailOver retries other servers if the call fails.</span>
    FailOver
    <span class="token comment">// FailTry retries the current server if the call fails.</span>
    FailTry
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-load-balancing" tabindex="-1"><a class="header-anchor" href="#_3-2-3-load-balancing" aria-hidden="true">#</a> 3.2.3 Load Balancing</h4><p>The framework integrates several commonly used load balancing methods.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
    <span class="token comment">// Random selects a random server.</span>
    Random BalanceModel <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token comment">// RoundRobin uses round-robin algorithm to select servers.</span>
    RoundRobin
    <span class="token comment">// ConsistentHash uses consistent hashing algorithm.</span>
    ConsistentHash
    <span class="token comment">// NetworkQuality selects servers based on network quality.</span>
    NetworkQuality
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-server" tabindex="-1"><a class="header-anchor" href="#_3-3-server" aria-hidden="true">#</a> 3.3 Server</h3><h4 id="_3-3-1-server-startup-and-registration" tabindex="-1"><a class="header-anchor" href="#_3-3-1-server-startup-and-registration" aria-hidden="true">#</a> 3.3.1 Server Startup and Registration</h4><p>In <code>application/rpcserver.go</code>, provide the <code>RpcServer</code> method to start the RPC server.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RpcServer</span><span class="token punctuation">(</span>handler <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> auth <span class="token operator">...</span>rpcx<span class="token punctuation">.</span>AuthFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	rpcServer<span class="token punctuation">,</span> err <span class="token operator">=</span> rpcx<span class="token punctuation">.</span><span class="token function">NewRPCServer</span><span class="token punctuation">(</span>rpcx<span class="token punctuation">.</span>ServerConfig<span class="token punctuation">{</span>
		ServerName<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>ServerName<span class="token punctuation">,</span>
		Addr<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%d&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">,</span>
		BasePath<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>BasePath<span class="token punctuation">,</span>
		RegisterPlugin<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">RegisterPluginType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>RegisterPlugin<span class="token punctuation">)</span><span class="token punctuation">,</span>
		RegisterServers<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>RegisterServers<span class="token punctuation">,</span>
		Handle<span class="token punctuation">:</span>          handler<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rpcServer<span class="token punctuation">.</span><span class="token function">RegisterAuthFunc</span><span class="token punctuation">(</span>auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
	rpcServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-2-authentication-component" tabindex="-1"><a class="header-anchor" href="#_3-3-2-authentication-component" aria-hidden="true">#</a> 3.3.2 Authentication Component</h4><p>In <code>rpcx/server.go</code>, <code>RegisterAuthFunc</code> interface is provided to customize the authentication component.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> AuthFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> token <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">Example</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TokenAuth</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> token <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;token error&quot;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-3-3-logging-middleware" tabindex="-1"><a class="header-anchor" href="#_3-3-3-logging-middleware" aria-hidden="true">#</a> 3.3.3 Logging Middleware</h4><p>In <code>rpcx/middleware.go</code>, <code>ServerLoggerPlugin</code> class is provided for request tracing and logging.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ServerLoggerPlugin <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ServerLoggerPlugin<span class="token punctuation">)</span> <span class="token function">PreHandleRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> r <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">SetRequestId</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;request_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	traceId <span class="token operator">:=</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;span_trace_id&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> traceId <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		span<span class="token punctuation">,</span> spanTraceId<span class="token punctuation">,</span> err <span class="token operator">:=</span> telemetry<span class="token punctuation">.</span><span class="token function">StartSpan</span><span class="token punctuation">(</span><span class="token string">&quot;RpcCall&quot;</span><span class="token punctuation">,</span> traceId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> opentracing<span class="token punctuation">.</span><span class="token function">StartTime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SpanSetTag</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token string">&quot;request_id&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;request_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SpanSetTag</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token string">&quot;call_method&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">)</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SetSpanTraceId</span><span class="token punctuation">(</span>spanTraceId<span class="token punctuation">)</span>
			spanMap<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> span<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;client: %s, server: %v, func: %s, params: %s&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;client_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServicePath<span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ServerLoggerPlugin<span class="token punctuation">)</span> <span class="token function">PostWriteResponse</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> res <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">DeleteRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> span<span class="token punctuation">,</span> ok <span class="token operator">:=</span> spanMap<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		telemetry<span class="token punctuation">.</span><span class="token function">FinishSpan</span><span class="token punctuation">(</span>span<span class="token punctuation">.</span><span class="token punctuation">(</span>opentracing<span class="token punctuation">.</span>Span<span class="token punctuation">)</span><span class="token punctuation">)</span>
		spanMap<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-client" tabindex="-1"><a class="header-anchor" href="#_3-4-client" aria-hidden="true">#</a> 3.4 Client</h3><h4 id="_3-4-1-client-pool-initialization" tabindex="-1"><a class="header-anchor" href="#_3-4-1-client-pool-initialization" aria-hidden="true">#</a> 3.4.1 Client Pool Initialization</h4><p>In <code>application/rpcserver.go</code>, provide the <code>initRpcClient</code> method to initialize the RPC client connection pool. This method is automatically triggered and will initialize if there is a <code>rpcClient</code> configuration.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initRpcClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">}</span>
    client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpcx<span class="token punctuation">.</span><span class="token function">NewRPCClient</span><span class="token punctuation">(</span>rpcx<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">{</span>
        ClientName<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>ClientName<span class="token punctuation">,</span>
        BasePath<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>BasePath<span class="token punctuation">,</span>
        RegisterPlugin<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">RegisterPluginType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>RegisterPlugin<span class="token punctuation">)</span><span class="token punctuation">,</span>
        RegisterServers<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>RegisterServers<span class="token punctuation">,</span>
        FailRetryModel<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">FailRetryModel</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>FailRetryModel<span class="token punctuation">)</span><span class="token punctuation">,</span>
        BalanceModel<span class="token punctuation">:</span>    rpcx<span class="token punctuation">.</span><span class="token function">BalanceModel</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>BalanceModel<span class="token punctuation">)</span><span class="token punctuation">,</span>
        PoolSize<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>PoolSize<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    rpcClient <span class="token operator">=</span> <span class="token operator">&amp;</span>RpcClient<span class="token punctuation">{</span>
        ClientName<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>ClientName<span class="token punctuation">,</span>
        clientPool<span class="token punctuation">:</span> client<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-custom-header-handling-function" tabindex="-1"><a class="header-anchor" href="#_3-4-2-custom-header-handling-function" aria-hidden="true">#</a> 3.4.2 Custom Header Handling Function</h4><p>In <code>application/rpcserver.go</code>, the <code>RegisterHeaderFunc</code> interface is provided to customize the header handling function. This method is used to add parameters that need to be passed through the context to the RPC request metadata.</p><div class="custom-container tip"><p class="custom-container-title">Example</p><p>Register the corresponding function in the application <code>cmd/api/server.go</code>.</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// Register header context chain</span>
    application<span class="token punctuation">.</span><span class="token function">RegisterHeaderFunc</span><span class="token punctuation">(</span>HeaderFunc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">HeaderFunc</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get the username</span>
    data<span class="token punctuation">[</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">...</span>
    <span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-4-3-remote-invocation-by-client" tabindex="-1"><a class="header-anchor" href="#_3-4-3-remote-invocation-by-client" aria-hidden="true">#</a> 3.4.3 Remote Invocation by Client</h4><p>In <code>application/rpcserver.go</code>, the <code>RpcCall</code> and <code>SRpcCall</code> methods are provided for remote invocation. These methods integrate parameter parsing, request tracing, header processing, and other functions to handle the RPC response parameters.</p><div class="custom-container tip"><p class="custom-container-title">Example of RpcCall</p><p>After receiving the response from the <code>RpcCall</code> method, you need to handle the HTTP response manually. (The HTTP response structure and methods can be customized.)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AuthController<span class="token punctuation">)</span> <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>
        req  <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>SystemInfoSearch<span class="token punctuation">)</span>
        resp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>SystemInfoResp<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    err <span class="token operator">:=</span> application<span class="token punctuation">.</span><span class="token function">RpcCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthServer<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthFuncSystemInfo<span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">Example of SRpcCall</p><p>After receiving the response from the <code>SRpcCall</code> method, the HTTP response method is automatically invoked. (The HTTP response method is provided by the system and does not support customization.)</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AuthController<span class="token punctuation">)</span> <span class="token function">Login</span><span class="token punctuation">(</span>c <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">SRpcCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthServer<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthFuncLogin<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>LoginParams<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>LoginResp<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,43);function _(S,P){const a=o("ExternalLinkIcon");return p(),c("div",null,[u,r,n("div",d,[k,v,m,n("div",h,[n("p",null,[s("Source "),n("a",g,[s("wiki"),t(a)])])])]),b,n("div",f,[y,C,n("div",w,[n("p",null,[s("Source "),n("a",R,[s("rpcx"),t(a)])])])]),x])}const T=e(l,[["render",_],["__file","rpc.html.vue"]]);export{T as default};
