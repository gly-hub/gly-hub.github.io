import{_ as e,o as a,c as n,a as i}from"./app-304f5532.js";const s={},d=i(`<h1 id="quick-build" tabindex="-1"><a class="header-anchor" href="#quick-build" aria-hidden="true">#</a> Quick Build</h1><div class="custom-container warning"><p class="custom-container-title">Prerequisites</p><p>Go version &gt;= 1.18</p></div><p>This guide will help you build a simple go-dandelion application from scratch.</p><h2 id="_1-install-go-dandelion-scaffolding-tool" tabindex="-1"><a class="header-anchor" href="#_1-install-go-dandelion-scaffolding-tool" aria-hidden="true">#</a> 1. Install go-dandelion scaffolding tool</h2><p>Install go-dandelion-cli to quickly generate project structure.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>go get github.com/gly-hub/go-dandelion/go-dandelion-cli@latest
go <span class="token function">install</span> github.com/gly-hub/go-dandelion/go-dandelion-cli@latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-create-go-admin-example-application" tabindex="-1"><a class="header-anchor" href="#_2-create-go-admin-example-application" aria-hidden="true">#</a> 2. Create go-admin-example application</h2><p>Executing the command will create a folder named go-admin-example as the application&#39;s main directory.</p><div class="custom-container warning"><p class="custom-container-title">Application Name</p><p>All services under this application share the same mod and need to have consistent application names: <strong>go-admin-example</strong></p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Create application and navigate into it</span>
go-dandelion-cli app <span class="token parameter variable">-n</span> go-admin-example <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> go-admin-example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-build-rpc-service" tabindex="-1"><a class="header-anchor" href="#_3-build-rpc-service" aria-hidden="true">#</a> 3. Build RPC service</h2><p>Initialize an RPC server service as an example RPC service for business logic implementation.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Build RPC service</span>
go-dandelion-cli build <span class="token parameter variable">-n</span> go-admin-example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, you need to select the required components such as MySQL, Redis, logger, and tracing. In this example, all components are initialized.</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>Enter the service type to create (1-rpc 2-http): 1
RPC service name: rpc-server
Initialize MySQL (y/n): y
Initialize Redis (y/n): y
Initialize logger (y/n): y
Initialize tracing (y/n): y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-build-http-service" tabindex="-1"><a class="header-anchor" href="#_4-build-http-service" aria-hidden="true">#</a> 4. Build HTTP service</h2><p>Initialize an HTTP server service as an example gateway service for external data interaction.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Build HTTP service</span>
go-dandelion-cli build <span class="token parameter variable">-n</span> go-admin-example
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, you need to select the required components such as MySQL, Redis, logger, and tracing. Since the gateway layer does not perform DAO operations, MySQL and Redis initialization is not required.</p><div class="language-cmd line-numbers-mode" data-ext="cmd"><pre class="language-cmd"><code>Enter the service type to create (1-rpc 2-http): 2
RPC service name: http-server
Initialize MySQL (y/n): n
Initialize Redis (y/n): n
Initialize logger (y/n): y
Initialize tracing (y/n): y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-modify-configuration-files" tabindex="-1"><a class="header-anchor" href="#_5-modify-configuration-files" aria-hidden="true">#</a> 5. Modify configuration files</h2><p>You need to modify the corresponding MySQL, Redis, tracing, and etcd configurations according to your own development environment. For an explanation of the configuration fields, please refer to <a href="/guide/baseconfig">Base Configuration</a>.</p><h2 id="_6-start-the-services" tabindex="-1"><a class="header-anchor" href="#_6-start-the-services" aria-hidden="true">#</a> 6. Start the services</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## Start the RPC service</span>
<span class="token builtin class-name">cd</span> rpc-server
<span class="token comment"># Navigate to the service directory</span>
go build <span class="token parameter variable">-o</span> rpc-server
<span class="token comment"># Run</span>
./rpc-server server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## Start the HTTP service</span>
<span class="token builtin class-name">cd</span> http-server
<span class="token comment"># Navigate to the service directory</span>
go build <span class="token parameter variable">-o</span> http-server
<span class="token comment"># Run</span>
./http-server server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),l=[d];function r(t,c){return a(),n("div",null,l)}const p=e(s,[["render",r],["__file","started.html.vue"]]);export{p as default};
