import{_ as a,r,o as l,c as s,b as e,d as t,e as i,a as o}from"./app-304f5532.js";const c={},d=o('<h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h1><p>go-dandelion is a framework scaffolding tool that integrates multiple popular components and technologies, including rpcx, fasthttp, gorm, redigo, swagger, and opentracing, among others. Its goal is to provide developers with a solution for quickly building microservice projects, offering rich functionality and scalability.</p><h2 id="_1-origin" tabindex="-1"><a class="header-anchor" href="#_1-origin" aria-hidden="true">#</a> 1.Origin</h2><p>When I was demonstrating a microservice using rpcx, I encountered a problem: while building the project directory structure, I found myself having to import many components and manually initialize them. This resulted in a cluttered project structure and lengthy initialization code. To address this issue, I began contemplating if there was a tool that could quickly scaffold the project directory structure and automatically initialize the components, facilitating faster business development. This led me to start developing the go-dandelion tool.</p><p>The goal of go-dandelion is to provide a solution for rapidly building microservice projects. It automatically creates the basic project directory structure and integrates automated initialization for commonly used components. This allows us to dive into business development more quickly without spending excessive time and effort on tedious initialization processes.</p><p>By using go-dandelion, I can swiftly create projects, and all the required components are correctly initialized. This results in a clearer project structure and reduces repetitive initialization code. Additionally, go-dandelion offers flexible configuration options and a plugin mechanism, allowing customization and extension based on specific requirements.</p><p>In summary, go-dandelion is a tool that has helped me quickly set up project directory structures and initialize components, enabling faster business development while maintaining a clean and scalable project structure.</p><h2 id="_2-component" tabindex="-1"><a class="header-anchor" href="#_2-component" aria-hidden="true">#</a> 2.Component</h2><p>Currently, go-dandelion integrates the following components:</p>',9),u={href:"https://github.com/smallnest/rpcx",target:"_blank",rel:"noopener noreferrer"},p={href:"https://github.com/valyala/fasthttp",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/qiangxue/fasthttp-routing",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/go-gorm/gorm",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/gomodule/redigo",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/go-swagger/go-swagger",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/spf13/cobra",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/spf13/viper",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/opentracing/opentracing-go",target:"_blank",rel:"noopener noreferrer"},v=o('<p>These components are integrated into go-dandelion to provide a comprehensive set of features and functionalities for developing microservice projects.</p><h2 id="_3-advantage" tabindex="-1"><a class="header-anchor" href="#_3-advantage" aria-hidden="true">#</a> 3.Advantage</h2><ul><li><p>Rapidly create RPC and HTTP services: We offer a convenient way to swiftly build RPC and HTTP services. With just a few simple steps, you can effortlessly construct high-performance services.</p></li><li><p>Configuration-driven initialization: With flexible configuration options, you can quickly initialize commonly used components such as MySQL, Redis, logging systems, and traceability links. Our system automatically handles the initialization based on your configuration, allowing you to focus more on business logic development.</p></li><li><p>Integrated rich features: Our service framework incorporates multiple core functionalities, including logging, traceability, rate limiting, circuit breaking, service registration, and service discovery. These features can be directly utilized within the framework, eliminating the need for writing additional code and greatly simplifying the development process.</p></li><li><p>Customizable middleware and plugins: We provide a middleware and plugin mechanism that allows you to customize and extend the functionality of the framework. You can write your own middleware to handle requests, responses, or other business logic, as well as develop plugins to enhance the capabilities of the framework. This enables you to flexibly tailor the behavior of the framework according to specific requirements.</p></li></ul><h2 id="_4-future" tabindex="-1"><a class="header-anchor" href="#_4-future" aria-hidden="true">#</a> 4.Future</h2><p>In the future, we plan to continue iterating on this project and introduce the following functionalities:</p>',5),w={href:"https://github.com/gly-hub/go-dandelion/tree/refactor_20230625_rpcserver",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/gly-hub/http-dandelion",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[e("p",null,"Improve code generation automation: We aim to further automate code generation to reduce unnecessary manual coding efforts. (TODO)")],-1),T=e("li",null,[e("p",null,"Expand the plugin library: We plan to expand the plugin library by introducing plugins for functionalities such as JWT authentication, timers, and more. (TODO)")],-1),z=e("li",null,[e("p",null,"Enhance deployment and operations processes: We will focus on adding comprehensive deployment and operations processes to streamline the deployment and management of the project. (TODO)")],-1),I=e("p",null,"By implementing these planned features, we aim to improve the project's functionality, performance, and ease of use for developers during the continuous development and iteration phases. If you are interested, you are welcome to join us.",-1);function j(O,W){const n=r("ExternalLinkIcon");return l(),s("div",null,[d,e("ul",null,[e("li",null,[e("a",u,[t("rpcx"),i(n)]),t("：Provides RPC services.")]),e("li",null,[e("a",p,[t("fasthttp"),i(n)]),t("：Provides an external gateway interface.")]),e("li",null,[e("a",h,[t("fasthttp-routing"),i(n)]),t("：Constructs routing functionality.")]),e("li",null,[e("a",g,[t("gorm"),i(n)]),t("：Handles database interactions.")]),e("li",null,[e("a",f,[t("redigo"),i(n)]),t("：Facilitates cache interactions.")]),e("li",null,[e("a",m,[t("go-swagger"),i(n)]),t("：Generates API documentation.")]),e("li",null,[e("a",b,[t("cobra"),i(n)]),t("：Offers a command-line tool.")]),e("li",null,[e("a",y,[t("viper"),i(n)]),t("：Reads configuration files.")]),e("li",null,[e("a",_,[t("opentracing-go"),i(n)]),t("：Enables distributed tracing.")])]),v,e("ul",null,[e("li",null,[e("p",null,[t("Refactor and enhance support for rpcx: We will address the current limitations and improve the extensibility and readability of rpcx integration. (DONE "),e("a",w,[t("Look"),i(n)]),t(")")])]),e("li",null,[e("p",null,[t("Optimize the HTTP engine and enable multiple engine applications: We are currently working on optimizing the HTTP engine and enabling the use of multiple engines for enhanced flexibility and performance. (DOING "),e("a",k,[t("http-dandelion"),i(n)]),t(")")])]),x,T,z]),I])}const P=a(c,[["render",j],["__file","about.html.vue"]]);export{P as default};
