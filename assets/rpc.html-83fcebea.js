import{_ as c,r as p,o as i,c as u,b as n,d as s,e as a,w as l,a as e}from"./app-304f5532.js";const r={},d=n("h1",{id:"rpc组件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#rpc组件","aria-hidden":"true"},"#"),s(" RPC组件")],-1),k=n("h2",{id:"_1-什么是rpc",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-什么是rpc","aria-hidden":"true"},"#"),s(" 1.什么是RPC")],-1),v={class:"theorem"},m=n("p",{class:"title"},"远程过程调用",-1),b=n("p",null,"分布式计算中，远程过程调用（英语：Remote Procedure Call，RPC）是一个计算机通信协议。 该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序， 而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。 RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。 如果涉及的软件采用面向对象编程，那么远程过程调用亦可称作远程调用或远程方法调用，例：Java RMI。",-1),g=n("p",null,"RPC是一种进程间通信的模式，程序分布在不同的地址空间里。如果在同一主机里，RPC可以通过不同的虚拟地址空间 （即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的物理地址进行交互。许多技术（通常是不兼容） 都是基于这种概念而实现的。",-1),h={class:"custom-container right"},f={href:"https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},C=n("h2",{id:"_2-什么是rpcx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-什么是rpcx","aria-hidden":"true"},"#"),s(" 2.什么是RPCx")],-1),_={class:"theorem"},R=n("p",{class:"title"},"RPCx",-1),x=n("p",null,"rpcx 是一个分布式的Go语言的 RPC 框架，支持Zookepper、etcd、consul多种服务发现方式，多种服务路由方式， 是目前性能最好的 RPC 框架之一。",-1),y={class:"custom-container right"},w={href:"https://doc.rpcx.io/",target:"_blank",rel:"noopener noreferrer"},S=e('<ul><li><code>简单易用</code>：易于入门, 易于开发, 易于集成, 易于发布， 易于监控</li><li><code>高性能</code>：性能远远高于 Dubbo、Motan、Thrift等框架，是gRPC性能的两倍</li><li><code>交叉平台</code>，交叉语言：可以容易部署在Windows/Linux/MacOS等平台，支持各种编程语言的调用</li><li><code>服务发现</code>：除了直连外，还支持 Zookeeper、Etcd、 Consul、mDNS等注册中心</li><li><code>服务治理</code>：支持 Failover、 Failfast、 Failtry、Backup等失败模式，支持 随机、 轮询、 权重、网络质量, 一致性哈希,地理位置等路由算法</li></ul><h2 id="_3-如何使用rpcx" tabindex="-1"><a class="header-anchor" href="#_3-如何使用rpcx" aria-hidden="true">#</a> 3.如何使用RPCx</h2>',2),P={class:"custom-container tip"},q=n("p",{class:"custom-container-title"},"提示",-1),M=e(`<h3 id="_3-1-服务发现" tabindex="-1"><a class="header-anchor" href="#_3-1-服务发现" aria-hidden="true">#</a> 3.1 服务发现</h3><p>参照实际项目开发，框架中只集成了Zookeeper、Etcd、 Consul三种常用的服务发现方式。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	ETCD RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;etcd&quot;</span>
	ZK   RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;zookeeper&quot;</span>
	Con  RegisterPluginType <span class="token operator">=</span> <span class="token string">&quot;consul&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-服务与治理" tabindex="-1"><a class="header-anchor" href="#_3-2-服务与治理" aria-hidden="true">#</a> 3.2 服务与治理</h3><p>服务治理是一个非常宽泛的概念，一般指独立于业务逻辑之外，给系统提供一些可靠运行的系统保障措施。 针对微服务场景下的常用故障模式，提供的保障措施包括流控、负载均衡、重试、隔离仓等。</p><h4 id="_3-2-1-基础配置" tabindex="-1"><a class="header-anchor" href="#_3-2-1-基础配置" aria-hidden="true">#</a> 3.2.1 基础配置</h4><div class="custom-container tip"><p class="custom-container-title">提示</p><p>服务的基础配置可参照<code>server/rpcx/client.go:101</code>，可自定义。(无则走默认配置)</p></div><p>默认：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">option</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Option <span class="token punctuation">{</span>
	opt <span class="token operator">:=</span> client<span class="token punctuation">.</span>Option<span class="token punctuation">{</span>
		Retries<span class="token punctuation">:</span>            <span class="token number">10</span><span class="token punctuation">,</span>               <span class="token comment">// 重试次数</span>
		TimeToDisallow<span class="token punctuation">:</span>     time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>      <span class="token comment">// 30秒内不会对失败的服务器进行重试</span>
		ConnectTimeout<span class="token punctuation">:</span>     <span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>  <span class="token comment">// 连接超时</span>
		IdleTimeout<span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment">// 最大空闲时间</span>
		BackupLatency<span class="token punctuation">:</span>      <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token comment">// 备份模式时间间隔</span>
		GenBreaker<span class="token punctuation">:</span>         breaker<span class="token punctuation">,</span> <span class="token comment">// 熔断器</span>
		SerializeType<span class="token punctuation">:</span>      protocol<span class="token punctuation">.</span>MsgPack<span class="token punctuation">,</span> <span class="token comment">// 序列化方式</span>
		CompressType<span class="token punctuation">:</span>       protocol<span class="token punctuation">.</span>None<span class="token punctuation">,</span> <span class="token comment">// 压缩方式</span>
		TCPKeepAlivePeriod<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> <span class="token comment">// TCP保活时间</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> opt
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>自定义</strong></p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> opt
<span class="token comment">// 100毫秒后内失败次数达到5次，熔断器打开 </span>
<span class="token keyword">func</span> <span class="token function">customBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Breaker <span class="token punctuation">{</span>
	<span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">NewConsecCircuitBreaker</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">CustomOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span> client<span class="token punctuation">.</span>Option <span class="token punctuation">{</span>
    opt <span class="token operator">:=</span> client<span class="token punctuation">.</span>Option<span class="token punctuation">{</span>
        Retries<span class="token punctuation">:</span>            <span class="token number">5</span><span class="token punctuation">,</span>               <span class="token comment">// 重试次数</span>
        TimeToDisallow<span class="token punctuation">:</span>     time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span>      <span class="token comment">// 30秒内不会对失败的服务器进行重试</span>
        ConnectTimeout<span class="token punctuation">:</span>     <span class="token number">1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span>  <span class="token comment">// 连接超时</span>
        IdleTimeout<span class="token punctuation">:</span>        <span class="token number">30</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span> <span class="token comment">// 最大空闲时间</span>
        BackupLatency<span class="token punctuation">:</span>      <span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">,</span> <span class="token comment">// 备份模式时间间隔</span>
        GenBreaker<span class="token punctuation">:</span>         customBreak<span class="token punctuation">,</span> <span class="token comment">// 熔断器</span>
        SerializeType<span class="token punctuation">:</span>      protocol<span class="token punctuation">.</span>MsgPack<span class="token punctuation">,</span> <span class="token comment">// 序列化方式</span>
        CompressType<span class="token punctuation">:</span>       protocol<span class="token punctuation">.</span>None<span class="token punctuation">,</span> <span class="token comment">// 压缩方式</span>
        TCPKeepAlivePeriod<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Minute<span class="token punctuation">,</span> <span class="token comment">// TCP保活时间</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> opt
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>cmd/api/server.go</code>中进行注册。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	
	<span class="token comment">// 注册</span>
	rpcx<span class="token punctuation">.</span><span class="token function">CustomOptions</span><span class="token punctuation">(</span>opt<span class="token punctuation">.</span>CustomOption<span class="token punctuation">)</span>
	
	<span class="token comment">// 应用初始化</span>
	application<span class="token punctuation">.</span><span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-2-失败模式" tabindex="-1"><a class="header-anchor" href="#_3-2-2-失败模式" aria-hidden="true">#</a> 3.2.2 失败模式</h4><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// FailFast 如果调用失败，立即返回错误</span>
	FailFast FailRetryModel <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token comment">// FailOver 如果调用失败，重试其他服务器</span>
	FailOver
	<span class="token comment">// FailTry 如果调用失败，重试当前服务器</span>
	FailTry
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-3-负载均衡" tabindex="-1"><a class="header-anchor" href="#_3-2-3-负载均衡" aria-hidden="true">#</a> 3.2.3 负载均衡</h4><p>框架中选择了较为常用的几种进行集成。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">const</span> <span class="token punctuation">(</span>
	<span class="token comment">// Random 随机</span>
	Random BalanceModel <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
	<span class="token comment">// RoundRobin 轮询</span>
	RoundRobin
	<span class="token comment">// ConsistentHash 一致性哈希</span>
	ConsistentHash
	<span class="token comment">// NetworkQuality 网络质量</span>
	NetworkQuality
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-服务端" tabindex="-1"><a class="header-anchor" href="#_3-3-服务端" aria-hidden="true">#</a> 3.3 服务端</h3><h4 id="_3-3-1-服务启动与注册" tabindex="-1"><a class="header-anchor" href="#_3-3-1-服务启动与注册" aria-hidden="true">#</a> 3.3.1 服务启动与注册</h4><p>在<code>application/rpcserver.go</code>中提供<code>RpcServer</code>方法，用于启动RPC服务。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">RpcServer</span><span class="token punctuation">(</span>handler <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> auth <span class="token operator">...</span>rpcx<span class="token punctuation">.</span>AuthFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token keyword">var</span> err <span class="token builtin">error</span>
	rpcServer<span class="token punctuation">,</span> err <span class="token operator">=</span> rpcx<span class="token punctuation">.</span><span class="token function">NewRPCServer</span><span class="token punctuation">(</span>rpcx<span class="token punctuation">.</span>ServerConfig<span class="token punctuation">{</span>
		ServerName<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>ServerName<span class="token punctuation">,</span>
		Addr<span class="token punctuation">:</span>            fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s:%d&quot;</span><span class="token punctuation">,</span> addr<span class="token punctuation">,</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>Port<span class="token punctuation">)</span><span class="token punctuation">,</span>
		BasePath<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>BasePath<span class="token punctuation">,</span>
		RegisterPlugin<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">RegisterPluginType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>RegisterPlugin<span class="token punctuation">)</span><span class="token punctuation">,</span>
		RegisterServers<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcServer<span class="token punctuation">.</span>RegisterServers<span class="token punctuation">,</span>
		Handle<span class="token punctuation">:</span>          handler<span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>
		rpcServer<span class="token punctuation">.</span><span class="token function">RegisterAuthFunc</span><span class="token punctuation">(</span>auth<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
    <span class="token operator">...</span>
	rpcServer<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-2-认证组件" tabindex="-1"><a class="header-anchor" href="#_3-3-2-认证组件" aria-hidden="true">#</a> 3.3.2 认证组件</h4><p>在<code>rpcx/server.go</code>提供了<code>RegisterAuthFunc</code>接口，用于自定义认证组件。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> AuthFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> token <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">示例</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">TokenAuth</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> token <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> token <span class="token operator">==</span> <span class="token string">&quot;admin&quot;</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;token error&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-3-3-日志中间件" tabindex="-1"><a class="header-anchor" href="#_3-3-3-日志中间件" aria-hidden="true">#</a> 3.3.3 日志中间件</h4><p>在<code>rpcx/middleware.go</code>提供了<code>ServerLoggerPlugin</code>类，用于链路追踪以及请求链路打印。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> ServerLoggerPlugin <span class="token keyword">struct</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ServerLoggerPlugin<span class="token punctuation">)</span> <span class="token function">PreHandleRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> r <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">SetRequestId</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;request_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	traceId <span class="token operator">:=</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;span_trace_id&quot;</span><span class="token punctuation">]</span>
	<span class="token keyword">if</span> traceId <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span>
		span<span class="token punctuation">,</span> spanTraceId<span class="token punctuation">,</span> err <span class="token operator">:=</span> telemetry<span class="token punctuation">.</span><span class="token function">StartSpan</span><span class="token punctuation">(</span><span class="token string">&quot;RpcCall&quot;</span><span class="token punctuation">,</span> traceId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> opentracing<span class="token punctuation">.</span><span class="token function">StartTime</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SpanSetTag</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token string">&quot;request_id&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;request_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SpanSetTag</span><span class="token punctuation">(</span>span<span class="token punctuation">,</span> <span class="token string">&quot;call_method&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">)</span>
			telemetry<span class="token punctuation">.</span><span class="token function">SetSpanTraceId</span><span class="token punctuation">(</span>spanTraceId<span class="token punctuation">)</span>
			spanMap<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> span<span class="token punctuation">)</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>

	logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;client: %s, server: %v, func: %s, params: %s&quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;client_name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServicePath<span class="token punctuation">,</span> r<span class="token punctuation">.</span>ServiceMethod<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Metadata<span class="token punctuation">[</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>ServerLoggerPlugin<span class="token punctuation">)</span> <span class="token function">PostWriteResponse</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> req <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> res <span class="token operator">*</span>protocol<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
	logger<span class="token punctuation">.</span><span class="token function">DeleteRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> span<span class="token punctuation">,</span> ok <span class="token operator">:=</span> spanMap<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>
		telemetry<span class="token punctuation">.</span><span class="token function">FinishSpan</span><span class="token punctuation">(</span>span<span class="token punctuation">.</span><span class="token punctuation">(</span>opentracing<span class="token punctuation">.</span>Span<span class="token punctuation">)</span><span class="token punctuation">)</span>
		spanMap<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span>goid<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-客户端" tabindex="-1"><a class="header-anchor" href="#_3-4-客户端" aria-hidden="true">#</a> 3.4 客户端</h3><h4 id="_3-4-1-客户端池初始化" tabindex="-1"><a class="header-anchor" href="#_3-4-1-客户端池初始化" aria-hidden="true">#</a> 3.4.1 客户端池初始化</h4><p>在<code>application/rpcserver.go</code>中提供<code>initRpcClient</code>方法，用于初始化RPC客户端连接池。该方法会自动触发， 如果存在<code>rpcClient</code>配置，将自动初始化。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">initRpcClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span>
  <span class="token punctuation">}</span>
  client<span class="token punctuation">,</span> err <span class="token operator">:=</span> rpcx<span class="token punctuation">.</span><span class="token function">NewRPCClient</span><span class="token punctuation">(</span>rpcx<span class="token punctuation">.</span>ClientConfig<span class="token punctuation">{</span>
    ClientName<span class="token punctuation">:</span>      config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>ClientName<span class="token punctuation">,</span>
    BasePath<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>BasePath<span class="token punctuation">,</span>
    RegisterPlugin<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">RegisterPluginType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>RegisterPlugin<span class="token punctuation">)</span><span class="token punctuation">,</span>
    RegisterServers<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>RegisterServers<span class="token punctuation">,</span>
    FailRetryModel<span class="token punctuation">:</span>  rpcx<span class="token punctuation">.</span><span class="token function">FailRetryModel</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>FailRetryModel<span class="token punctuation">)</span><span class="token punctuation">,</span>
    BalanceModel<span class="token punctuation">:</span>    rpcx<span class="token punctuation">.</span><span class="token function">BalanceModel</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>BalanceModel<span class="token punctuation">)</span><span class="token punctuation">,</span>
    PoolSize<span class="token punctuation">:</span>        config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>PoolSize<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
      <span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  rpcClient <span class="token operator">=</span> <span class="token operator">&amp;</span>RpcClient<span class="token punctuation">{</span>
        ClientName<span class="token punctuation">:</span> config<span class="token punctuation">.</span>Conf<span class="token punctuation">.</span>RpcClient<span class="token punctuation">.</span>ClientName<span class="token punctuation">,</span>
        clientPool<span class="token punctuation">:</span> client<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-2-自定义header处理方法" tabindex="-1"><a class="header-anchor" href="#_3-4-2-自定义header处理方法" aria-hidden="true">#</a> 3.4.2 自定义header处理方法</h4><p>在<code>application/rpcserver.go</code>提供了<code>RegisterHeaderFunc</code>接口，用于自定义header处理方法。 该方法用于将需要通过context传递的参数添加到rpc请求元数据中。</p><div class="custom-container tip"><p class="custom-container-title">示例</p><p>在应用<code>cmd/api/server.go</code>中进行对应方法注册</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
    <span class="token comment">// 注册头部context链路</span>
    application<span class="token punctuation">.</span><span class="token function">RegisterHeaderFunc</span><span class="token punctuation">(</span>HeaderFunc<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">HeaderFunc</span><span class="token punctuation">(</span>ctx <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> data <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token comment">// 获取用户名</span>
	data<span class="token punctuation">[</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>
	<span class="token keyword">return</span> data
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h4 id="_3-4-3-客户端进行远程调用" tabindex="-1"><a class="header-anchor" href="#_3-4-3-客户端进行远程调用" aria-hidden="true">#</a> 3.4.3 客户端进行远程调用</h4><p><code>application/rpcserver.go</code>提供了<code>RpcCall</code>方法以及<code>SRpcCall</code>方法，用于进行远程调用。 在<code>RpcCall</code>以及<code>SRpcCall</code>中集成了<code>参数解析</code>、<code>链路追踪</code>、<code>header处理</code>等方法，对rpc 响应参数进行了处理。</p><div class="custom-container tip"><p class="custom-container-title">RpcCall示例</p><p><code>RpcCall</code>方法接口rpc响应结果后，需要手动处理http响应。（该http响应结构以及方法可自定义）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AuthController<span class="token punctuation">)</span> <span class="token function">GetSystemInfo</span><span class="token punctuation">(</span>c <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token punctuation">(</span>
        req  <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>SystemInfoSearch<span class="token punctuation">)</span>
        resp <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>SystemInfoResp<span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    err <span class="token operator">:=</span> application<span class="token punctuation">.</span><span class="token function">RpcCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthServer<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthFuncSystemInfo<span class="token punctuation">,</span> req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Fail</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">Success</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> resp<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="custom-container tip"><p class="custom-container-title">SRpcCall示例</p><p><code>SRpcCall</code>方法接口rpc响应结果后，会自动调用http响应方法。（http响应方法为系统提供，不支持自定义响应）</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AuthController<span class="token punctuation">)</span> <span class="token function">Login</span><span class="token punctuation">(</span>c <span class="token operator">*</span>routing<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> application<span class="token punctuation">.</span><span class="token function">SRpcCall</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthServer<span class="token punctuation">,</span> rpcserver<span class="token punctuation">.</span>AuthFuncLogin<span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>LoginParams<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">new</span><span class="token punctuation">(</span>auth2<span class="token punctuation">.</span>LoginResp<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,40);function T(F,B){const t=p("ExternalLinkIcon"),o=p("RouterLink");return i(),u("div",null,[d,k,n("div",v,[m,b,g,n("div",h,[n("p",null,[s("来自 "),n("a",f,[s("维基百科"),a(t)])])])]),C,n("div",_,[R,x,n("div",y,[n("p",null,[s("来自 "),n("a",w,[s("rpcx"),a(t)])])])]),S,n("div",P,[q,n("p",null,[s("框架集成了RPCx组件，只需要配置文件中配置 "),a(o,{to:"/zh/guide/baseconfig.html"},{default:l(()=>[s("rpc服务端、客户端配置")]),_:1}),s("。")])]),M])}const A=c(r,[["render",T],["__file","rpc.html.vue"]]);export{A as default};
